<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pcb_8h" kind="file" language="C++">
    <compoundname>pcb.h</compoundname>
    <includes refid="pandos__const_8h" local="yes">pandos_const.h</includes>
    <includes refid="pandos__types_8h" local="yes">pandos_types.h</includes>
    <incdepgraph>
      <node id="5">
        <label>umps3/umps/types.h</label>
      </node>
      <node id="1">
        <label>/home/circleci/docs/h/pcb.h</label>
        <link refid="pcb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pandos_const.h</label>
        <link refid="pandos__const_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>umps3/umps/const.h</label>
      </node>
      <node id="4">
        <label>pandos_types.h</label>
        <link refid="pandos__types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pcb_8h_1a5cbd92344b2dae9f317b956359b5f2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initPcbs</definition>
        <argsstring>()</argsstring>
        <name>initPcbs</name>
        <briefdescription>
<para>Initializes the PCBs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This function should be called before any other PCB-related function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="24" column="6" declfile="/home/circleci/docs/h/pcb.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1ab42d615bd7053b952a73dee6fd84c54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freePcb</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>freePcb</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Deallocates the PCB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>PCB to be released.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>After calling this function, the PCB can&apos;t be used anymore. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="34" column="6" declfile="/home/circleci/docs/h/pcb.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a03951baaa04f601feee5405138304892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* allocPcb</definition>
        <argsstring>()</argsstring>
        <name>allocPcb</name>
        <briefdescription>
<para>Allocates a PCB and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>All the records are cleaned before the allocation.</para>
<para><simplesect kind="return"><para>The allocated PCB if memory is available, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="44" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="44" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a21ca0d917dc8cc9a515f74350305c8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* mkEmptyProcQ</definition>
        <argsstring>()</argsstring>
        <name>mkEmptyProcQ</name>
        <briefdescription>
<para>Creates a new empty process queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The new process queue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="51" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="51" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a14a862477c2301432a9e9b0aac901c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emptyProcQ</definition>
        <argsstring>(pcb_t *tp)</argsstring>
        <name>emptyProcQ</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
<para>Checks if a process queue is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if tp is empty, FALSE otherwise.</para>
</simplesect>
<simplesect kind="remark"><para>TRUE and FALSE are defined in umps3/umps/const.h. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="62" column="5" declfile="/home/circleci/docs/h/pcb.h" declline="62" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1ab3b557f910b033449a42aa5cf9b86c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertProcQ</definition>
        <argsstring>(pcb_t **tp, pcb_t *p)</argsstring>
        <name>insertProcQ</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> **</type>
          <declname>tp</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts a PCB in a queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the queue (sentinel). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB to be inserted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="70" column="6" declfile="/home/circleci/docs/h/pcb.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a80a3845d65f890d39a523f3df66095d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* headProcQ</definition>
        <argsstring>(pcb_t *tp)</argsstring>
        <name>headProcQ</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the head of the process queue, without removing it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the tail of the process queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the head of the queue. If the queue is empty, returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="80" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="80" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a4693d732287c116baf471b86cec97b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* removeProcQ</definition>
        <argsstring>(pcb_t **tp)</argsstring>
        <name>removeProcQ</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> **</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
<para>Removes the head of the PCB queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the queue (sentinel). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the removed PCB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="88" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="88" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a53e0aeba401f9c8967fa7b9ae4bcb98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* outProcQ</definition>
        <argsstring>(pcb_t **tp, pcb_t *p)</argsstring>
        <name>outProcQ</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> **</type>
          <declname>tp</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Removes the PCB pointed by p from the process queue pointed by tp and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the queue (sentinel). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the removed PCB. If the PCB pointed by p is not in the queue, returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="100" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="100" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a7d6e59469f944f132a41c390b606ab08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emptyChild</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>emptyChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Checks whether the PCB pointed by p has children. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the PCB pointed by p doesn&apos;t have any children, FALSE otherwise. </para>
</simplesect>
<simplesect kind="remark"><para>TRUE and FALSE are defined in umps3/umps/const.h. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="111" column="5" declfile="/home/circleci/docs/h/pcb.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1acbb38484ab3807a24bf6513c05101a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertChild</definition>
        <argsstring>(pcb_t *prnt, pcb_t *p)</argsstring>
        <name>insertChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>prnt</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inserts the PCB pointed by p as a child of the PCB pointed by prnt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB who will become parent of p. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB who will become child of prnt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="120" column="6" declfile="/home/circleci/docs/h/pcb.h" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1a4d8a060bdeac7847a16e45ffe18d3389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* removeChild</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>removeChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Remove and return the first child of the PCB pointed by p. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB whose first child will be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first child of the PCB pointed by p. If p has no children return NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="130" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="130" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8h_1ac842b91f7c9963383016a95ae09f903c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* outChild</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>outChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Removes and return the PCB pointed by p from the list of his parent&apos;s children. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PCB that will be removed and returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the removed PCB. If the PCB pointed by p doesn&apos;t have any parent return NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/circleci/docs/h/pcb.h" line="140" column="7" declfile="/home/circleci/docs/h/pcb.h" declline="140" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Process Control Block methods. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Luca Donno, Antonio Lopez, Samuele Marro, Edoardo Merli </para>
</simplesect>
<simplesect kind="version"><para>0.1.0 </para>
</simplesect>
<simplesect kind="date"><para>2021-02-13</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>PCB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PCB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pandos__const_8h" kindref="compound">pandos_const.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pandos__types_8h" kindref="compound">pandos_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a5cbd92344b2dae9f317b956359b5f2d9" kindref="member">initPcbs</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1ab42d615bd7053b952a73dee6fd84c54d" kindref="member">freePcb</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1a03951baaa04f601feee5405138304892" kindref="member">allocPcb</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1a21ca0d917dc8cc9a515f74350305c8fd" kindref="member">mkEmptyProcQ</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a14a862477c2301432a9e9b0aac901c47" kindref="member">emptyProcQ</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*tp);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1ab3b557f910b033449a42aa5cf9b86c5e" kindref="member">insertProcQ</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>**tp,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1a80a3845d65f890d39a523f3df66095d6" kindref="member">headProcQ</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*tp);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1a4693d732287c116baf471b86cec97b69" kindref="member">removeProcQ</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>**tp);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1a53e0aeba401f9c8967fa7b9ae4bcb98b" kindref="member">outProcQ</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>**tp,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1a7d6e59469f944f132a41c390b606ab08" kindref="member">emptyChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8h_1acbb38484ab3807a24bf6513c05101a72" kindref="member">insertChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*prnt,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1a4d8a060bdeac7847a16e45ffe18d3389" kindref="member">removeChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8h_1ac842b91f7c9963383016a95ae09f903c" kindref="member">outChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/circleci/docs/h/pcb.h"/>
  </compounddef>
</doxygen>
